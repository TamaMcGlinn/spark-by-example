#+EXPORT_FILE_NAME: ../../../numeric/Inner_Product.org
#+OPTIONS: author:nil title:nil toc:nil

** The Inner_Product algorithm

   The ~Inner_Product~ algorithm computes the scalar product of two
   vectors ~A~ and ~B~ and adds it to an initial value ~Init~. Its
   signature is:

   #+BEGIN_SRC ada
     function Inner_Product (A : T_Arr; B : T_Arr; Init : T) return T
   #+END_SRC

*** The predicates used
**** The Multiply_No_Overflow predicate

     This predicate will check if there will be an overflow due to the
     multiplication of two ~T~ values. Again, we should thank Claire
     Dross from AdaCore for the help and solution provided.

     Looking at the ~Add_No_Overflow~ function [[./Accumulate.org][previously defined]], the
     specification of ~Multiply_No_Overflow~ could be:

     #+INCLUDE: "./multiply_no_overflow_naive.ads" :src ada

     Unfortunately, ~GNATprove~ cannot prove the contract of
     ~Multiply_No_Overflow~. This is due to the fact that the
     properties we are trying to prove concern non-linear arithmetic
     and SMT solvers are not good at proving non-linear properties.
     We therefore need to write a complete implementation of
     ~Multiply_No_Overflow~ to help the provers to prove the contract
     cases.

     The new specification of ~Multiply_No_Overflow~ is:

     #+INCLUDE: "../../../spec/overflow.ads" :src ada :range-begin "function Multiply_No_Overflow" :range-end "\s-*(\([^()]*?\(?:\n[^()]*\)*?\)*)\s-*\([^;]*?\(?:\n[^;]*\)*?\)*;" :lines "20-25"

     And the corresponding implementation is:

     #+INCLUDE: "../../../spec/overflow.adb" :src ada :range-begin "function Multiply_No_Overflow" :range-end "End Multiply_No_Overflow;" :lines "9-31"

     The cases when ~X~ is equal to ~0~ or ~-1~ are simple and do not
     need extra assertions. Let us consider the case when ~X~ is in
     the range ~T'First .. -2~. Then we should check if ~Y~ is in the
     range ~T'Last / X .. T'First / X~. The assertions guides the
     provers: if ~Y < T'Last / X~ then ~X * Y > T'Last~ which allows
     the prover to detect that we are in the second contract cases and
     must return ~False~ which is the case. The same reasoning applies
     for the case when ~X~ is in the range ~1 .. T'Last~.

     Notice finally that we must use the ~-gnato13~ switch for GNAT in
     order to be able to prove ~Multiply_No_Overflow~ (see
     ~numeric_algorithms.gpr~ file). ~-gnato13~ signifies that
     overflows are strictly checked outside assertions and that they
     are eliminated inside assertions. This is due to the use of
     expressions like ~X * Y~ in assertions (cf. for instance the
     postcondition of ~Multiply_No_Overflows~). Overflows could of
     course occur in such expressions as we also explore the case when
     there are, but we can reasonably remove overflow checks in
     assertions.

     Using this implementation and specification, ~GNATprove~ proves
     the contract cases of ~Multiply_No_Overflow~.

**** The Inner_Prod_Def_Rec and Inner_Prod_Def functions

     Based on the ~Acc_Def_Rec~ function, we can write a similar
     function to calculate recursively the scalar product of two
     arrays.

     #+INCLUDE: "../../../spec/inner_prod_def_p.ads" :src ada :range-begin "function Inner_Prod_Def_Rec" :range-end "\s-*(\([^()]*?\(?:\n[^()]*\)*?\)*)\s-*\([^;]*?\(?:\n[^;]*\)*?\)*;" :lines "8-29"

     The function is very similar, except for the fact that we have to
     first check if there is no overflow when multiplying the two
     values in the array before checking that there is no overflow
     when adding the product and the previous result.

     As usual, the recursive call is encapsulated in a wrapper function:

     #+INCLUDE: "../../../spec/inner_prod_def_p.ads" :src ada :range-begin "function Inner_Prod_Def$" :range-end "\s-*(\([^()]*?\(?:\n[^()]*\)*?\)*)\s-*\([^;]*?\(?:\n[^;]*\)*?\)*;" :lines "31-39"

*** Specification of Inner_Product

    The specification of ~Inner_Product~ is the following:

    #+INCLUDE: "../../../numeric/inner_product_p.ads" :src ada :range-begin "function Inner_Product" :range-end "\s-*(\([^()]*?\(?:\n[^()]*\)*?\)*)\s-*\([^;]*?\(?:\n[^;]*\)*?\)*;" :lines "8-18"

    The preconditions check that no overflow will occur during the
    algorithm. The postcondition checks that the result has to be the
    same than the one computed by the function ~Inner_Prod_Def~.

*** Implementation of Inner_Product

    The implementation of ~Inner_Product~ is quite simple:

    #+INCLUDE: "../../../numeric/inner_product_p.adb" :src ada :range-begin "function Inner_Product" :range-end "End Inner_Product;" :lines "4-23"

    As in ~Accumulate~, the assertion inside the loop is here to help
    the prover with the overflow checks.

    Using this implementation and specification, ~GNATprove~ manages
    to prove everything (except the termination of
    ~Inner_Prod_Def_Rec~ as usual).

# Local Variables:
# ispell-dictionary: "english"
# End:

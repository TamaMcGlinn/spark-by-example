#+EXPORT_FILE_NAME: ../../../binary-search/Search_Equal_Range.org
#+OPTIONS: author:nil title:nil toc:nil

** The Search_Equal_Range Algorithm

   The ~Search_Equal_Range~ algorithm will find the range of a given
   value ~V~ in a given array ~A~.

   Its signature can be expressed as :

   #+BEGIN_SRC ada
     function Search_Equal_Range (A : T_Arr; V : T) return Option_Pair;
   #+END_SRC

   This function returns an ~Option_Pair~. ~Option_Pair~ is just a
   custom type like ~Option~ defined to store two values instead of a
   single one:

   #+INCLUDE: "../../../spec/types.ads" :src ada :range-begin "type Option_Pair" :range-end "end record;" :lines "29-38"

   If ~Result~ is of type ~Option_Pair~, and equal to the result of
   ~Search_Equal_Range (A,V)~, then these inequalities are verified,
   provided that ~Result.Exists~ is true:

   - for all ~J~ in ~A'First .. Result.Lower - 1~ then ~A(J) < V~
   - for all ~J~ in ~Result.Lower .. Result.Upper - 1~ then ~A(J) = V~
   - for all ~J~ in ~Result.Upper .. A'Last~ then ~V < A(J)~

   Notice that the ranges on wich ~J~ is defined in the three previous
   points may be empty.

   This algorithm is the combination of the result of both
   [[Search_Lower_Bound.org][Search_Lower_Bound]] and [[Search_Upper_Bound.org][Search_Upper_Bound]], so the properties of the
   returned ~Option_Pair~ can be easily infered from those of the
   result of these two functions.

*** Specification of Search_Equal_Range

    ~Search_Equal_Range~ can be specified as follows:

    #+INCLUDE: "../../../binary-search/search_equal_range_p.ads" :src ada :range-begin "function Search_Equal_Range" :range-end "\s-*return\s-*\([^;]*?\(?:\n[^;]*\)*?\)*;" :lines "13-35"

    There are two preconditions for ~Search_Equal_Range~:

    - ~A~ should be sorted, as with all binary search algorithms
    - ~A'Last~ should be less than ~Positive'Last~ as the returned
      values can be equal to ~A'Last +1~

    The postconditions are expressed through contract cases stating that

    - there are no indexes returned if the array is empty
    - if the array is not empty then a valid pair of indexes is returned, and
      1. the pair of indexes verify ~A'First <= Result'Lower <=
         Result.Upper <= A'Last +1~
      2. for all ~J~ in ~A'First .. Result.Lower - 1~ then ~A(J) < V~
      3. for all ~J~ in ~Result.Lower .. Result.Upper - 1~ then ~A(J)
         = V~
      4. for all ~J~ in ~Result.Upper .. A'Last~ then ~V < A(J)~

      Again, the ranges defined for ~J~ may be empty.

*** Implementations of Search_Equal_Range

    We will present two implementations of this algorithm. They both
    use the same specification.

**** First implementation

     The ~Search_Equal_Range~ can be easily implemented using the
     previously defined functions [[Search_Lower_Bound.org][Search_Lower_Bound]] and
     [[Search_Upper_Bound.org][Search_Upper_Bound]] as they directly provide the desired pair of
     indexes:

     #+INCLUDE: "../../../binary-search/search_equal_range_p.adb" :src ada :range-begin "function Search_Equal_Range" :range-end "End Search_Equal_Range;" :lines "5-26"

     ~GNATprove~ does not need any annotations other than the
     specification of the function itself to prove this
     implementation.

**** A more elaborate implementation

     The first version, while being easy to implement, understand and
     prove, does some work two times (the array is traversed entirely
     by ~Search_Lower_Bound~ and ~Search_Upper_Bound~). This is why
     another implementation is proposed in the C++ standard library,
     which in SPARK translates to:

     #+INCLUDE: "../../../binary-search/search_equal_range_opt_p.adb" :src ada :range-begin "function Search_Equal_Range_Opt" :range-end "End Search_Equal_Range_Opt;" :lines "5-66"

     The working principle of this code is to narrow down at the same
     time the ranges where ~Search_Lower_Bound~ and
     ~Search_Upper_Bound~ will look for the results instead of calling
     these two functions separately.

     The loop variant is ~Right - Left~, which decreases at each
     iteration. The loop invariants express that

     - ~Left~ and ~Right~ remain in the correct range  and in the
       correct position with relation to each other
     - all values found at an index strictly lower than ~Left~ are
       less than ~V~
     - all values found at an index greater or equal than ~Right~ are
       strictly greater than ~V~.

     These loop invariants and the postconditions of
     ~Search_Lower_Bound~ and ~Search_Upper_Bound~, enable ~GNATprove~
     to prove everything.

# Local Variables:
# ispell-dictionary: "english"
# End:

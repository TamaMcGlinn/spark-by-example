#+EXPORT_FILE_NAME: ../../../non-mutating/Equal_Mismatch.org
#+OPTIONS: author:nil title:nil toc:nil

** The Equal and Mismatch algorithms

   ~Equal~ and ~Mismatch~ algorithms compare sequences. Their
   signatures are the following:

   #+BEGIN_SRC ada
     function Equal (A : T_Arr; B : T_Arr) return Boolean;
     function Mismatch (A : T_Arr; B : T_Arr) return Option;
   #+END_SRC

   ~Equal (A, B)~ returns ~True~ if ~A~ and ~B~ have the same length
   and elements of ~A~ and ~B~ are equal when traversing ~A~ and ~B~
   in the same order. ~Mismatch~ is not simply the negation of
   ~Equal~: it returns the smallest valid index ~J~ of ~A~ such that
   ~A (J)~ differs from ~B (J)~ (an ~Option~ is used to consider the
   case where ~A~ and ~B~ are identical).

   In the following, we will first define ~Mismatch~ and then ~Equal~
   using ~Mismatch~.

*** The predicate Equal_Ranges

    ~Equal_Ranges~ is a predicate specifying that two arrays are
    identical. Using Ada support for array types, we can directly use
    equality on arrays to define the predicate:

    #+INCLUDE: "../../../spec/equal_ranges_p.ads" :src ada :range-begin "function Equal_Ranges" :range-end "\s-*(\([^()]*?\(?:\n[^()]*\)*?\)*)\s-*\([^;]*?\(?:\n[^;]*\)*?\)*;" :lines "11-15"

    ~Equal_Ranges (A, B)~ will be false if ~B~ is longer than ~A~, so
    we have to pay attention to the slices that will be used in
    ~Mismatch~ specification.

    We will also define an overloaded version of ~Equal_Ranges~ using
    an offset (this is just syntactic sugar as slices can also be
    used):

    #+INCLUDE: "../../../spec/equal_ranges_p.ads" :src ada :range-begin "function Equal_Ranges[^)]*? Natural" :range-end "\s-*(\([^()]*?\(?:\n[^()]*\)*?\)*)\s-*\([^;]*?\(?:\n[^;]*\)*?\)*;" :lines "16-23"

    We need to add a [[http://docs.adacore.com/spark2014-docs/html/ug/en/source/subprogram_contracts.html#preconditions][precondition]] to exclude invalid ~Offset~
    values. Notice that running ~GNATprove~ on the corresponding file
    proves that there are no range errors.

*** Specification of Mismatch

    The specification of Mismatch is based on two contract cases:

    - either ~A~ and ~B~ are equal on their first ~A'Length~ indexes,
      and in this case, the returned ~Option~ is false.
    - otherwise it means that the returned ~Option~ is true and
      contains a positive value ~I~ such that
      - ~A'First + I~ is a valid index of ~A~
      - ~A~ and ~B~ differ at offset ~I~ and all elements of ~A~ and
        ~B~ are equal up to offset ~I~

    #+INCLUDE: "../../../non-mutating/mismatch_p.ads" :src ada :range-begin "function Mismatch" :range-end "\s-*(\([^()]*?\(?:\n[^()]*\)*?\)*)\s-*\([^;]*?\(?:\n[^;]*\)*?\)*;" :lines "10-26"

    Notice that we must add a precondition specifying that ~A~ has the
    same length than ~B~ to mimic ACSL by Example specification and to
    avoid possible overflows in the implementation of the algorithm.

*** Implementation of Mismatch

    The implementation of ~Mismatch~ is the following:

    #+INCLUDE: "../../../non-mutating/mismatch_p.adb" :src ada :range-begin "function Mismatch" :range-end "end Mismatch;" :lines "7-27"

    The invariants are rather simple to write using the predicate
    ~Equal_Ranges~.

*** Specification of Equal

    ~Equal~ is easily specified with the ~Equal_Ranges~ predicate. We
    suppose that ~A~ and ~B~ do not have necessarily the same length,
    but that ~B~ may be longer than ~A~. In this case, we only compare
    the first ~A'Length~ elements of ~B~ with the ones of ~A~.

    #+INCLUDE: "../../../non-mutating/equal_p.ads" :src ada :range-begin "function Equal" :range-end "\s-*(\([^()]*?\(?:\n[^()]*\)*?\)*)\s-*\([^;]*?\(?:\n[^;]*\)*?\)*;" :lines "10-17"

*** Implementation of Equal

    ~Equal~ is easily implemented using ~Mismatch~:

    #+INCLUDE: "../../../non-mutating/equal_p.adb" :src ada :range-begin "function Equal" :range-end "\s-*(\([^()]*?\(?:\n[^()]*\)*?\)*)\s-*\([^;]*?\(?:\n[^;]*\)*?\)*;" :lines "8-13"

    As ~Equal~ is defined with an expression function, we could also
    have directly give the implementation of ~Equal~ within its
    specification.

*** A "reversed" specification and implementation of Equal

    We can "reverse" the specification and the implementation of
    ~Equal~ by implementing ~Equal~ using equality on arrays and
    specifying as a postcondition that arrays ~A~ and ~B~ do not
    mismatch:

    #+INCLUDE: "../../../non-mutating/equal_rev_p.ads" :src ada :range-begin "function Equal" :range-end "\s-*(\([^()]*?\(?:\n[^()]*\)*?\)*)\s-*\([^;]*?\(?:\n[^;]*\)*?\)*;" :lines "11-18"

    These specification and implementation of ~Equal~ can also be
    proved.

# Local Variables:
# ispell-dictionary: "english"
# End:

#+EXPORT_FILE_NAME: ../../../mutating/Reverse_Copy.org
#+OPTIONS: author:nil title:nil toc:nil

** The Reverse_Copy algorithm

   The ~Reverse_Copy~ algorithm inverts the order of the elements of a
   given array ~A~ in another array ~B~ without modifying ~A~. Its
   signature is:

   #+BEGIN_SRC ada
     procedure Reverse_Copy (A : T_Arr; B : in out T_Arr);
   #+END_SRC

*** The Is_Reversed predicate

    In order to specify and implement the ~Reverse_Copy~ properly we
    will first define a predicate ~Is_Reversed~ in order to hide all
    quantifiers and make our code more readable. The predicate
    ~Is_Reversed~ is defined as follows:

    #+INCLUDE: "../../../spec/is_reversed_p.ads" :src ada :range-begin "function Is_Reversed" :range-end "\s-*(\([^()]*?\(?:\n[^()]*\)*?\)*)\s-*\([^;]*?\(?:\n[^;]*\)*?\)*;" :lines "8-14"

    This predicate, on the condition that the two arrays given as
    parameters have the same length, will check whether the elements
    of ~A~ are in reverse order of those of ~B~, i.e. ~A (A'Last) = B
    (B'First); A (A'Last -1) = B (B'First +1) ...~ and so on.

*** Specification of Reverse_Copy

    ~Reverse_Copy~ can be specified as follows:

    #+INCLUDE: "../../../mutating/reverse_copy_p.ads" :src ada :range-begin "procedure Reverse_Copy" :range-end "\s-*(\([^()]*?\(?:\n[^()]*\)*?\)*)\s-*\([^;]*?\(?:\n[^;]*\)*?\)*;" :lines "8-13"

    The precondition verifies that ~A~ and ~B~ are of same length. The
    postcondition ensures that elements of ~A~ are indeed in the
    reverse order of those of ~B~.

*** Implementation of Reverse_Copy

    ~Reverse_Copy~ is implemented in the following way:

    #+INCLUDE: "../../../mutating/reverse_copy_p.adb" :src ada :range-begin "procedure Reverse_Copy" :range-end "end Reverse_Copy;" :lines "5-19"

    The implementation is straightforward, the loop invariant
    specifies that the sub-array composed of the first ~I-B'First~
    elements of ~B~ is in reverse order of the sub-array of same
    length, composed of the last elements of ~A~.

    When using ~GNATprove~ on this implementation and specification,
    everything is proved.

# Local Variables:
# ispell-dictionary: "english"
# End:

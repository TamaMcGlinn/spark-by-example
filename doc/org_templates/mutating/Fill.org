#+EXPORT_FILE_NAME: ../../../mutating/Fill.org
#+OPTIONS: author:nil title:nil toc:nil

** The Fill algorithm

   The ~Fill~ algorithm initializes an array with a particular
   value. Here is its signature:

   #+BEGIN_SRC ada
     procedure Fill (A : in out T_Arr; Val : T);
   #+END_SRC

   ~A~ needs of course to be passed as a ~out~ parameter as it will be
   modified, but also as an ~in~ parameter because it will be used
   with the ~Constant_Range_From_Location~ predicate defined with the
   [[../non-mutating/Search_N.org][Search_N]] algorithm and ~Constant_Range_From_Location~ requires a
   ~in~ parameter.

*** Specification of Fill

    The specification of ~Fill~ is very simple:

    #+INCLUDE: "../../../mutating/fill_p.ads" :src ada :range-begin "procedure Fill" :range-end "\s-*(\(.*?\(?:\n.*\)*?\)*)\s-*\([^;]*?\(?:\n[^;]*\)*?\)*;" :lines "7-12"

*** Implementation of Fill

    The implementation of ~Fill~ is the following:

    #+INCLUDE: "../../../mutating/fill_p.adb" :src ada :range-begin "procedure Fill" :range-end "End Fill;" :lines "4-16"

    The loop invariant specify that there is a constant range of ~Val~
    values starting at index ~A'First~ with length ~I - A'First + 1~
    in ~A~.

    Everything is easily proved with ~GNATprove~.

# Local Variables:
# ispell-dictionary: "english"
# End:

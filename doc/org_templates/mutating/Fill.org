#+EXPORT_FILE_NAME: ../../../mutating/Fill.org
#+OPTIONS: author:nil title:nil toc:nil

** The Fill algorithm

   The ~Fill~ algorithm initializes an array with a particular
   value. Here is its signature:

   #+BEGIN_SRC ada
     procedure Fill (A : in out T_Arr; Val : T);
   #+END_SRC

   ~A~ needs of course to be passed as a ~out~ parameter as it will be
   modified, but also as an ~in~ parameter because it will be used
   with the ~Constant_Range_From_Location~ predicate defined with the
   [[../non-mutating/Search_N.org][Search_N]] algorithm and ~Constant_Range_From_Location~ requires a
   ~in~ parameter.

*** Specification of Fill

    The specification of ~Fill~ is very simple:

    #+INCLUDE: "../../../mutating/fill_p.ads" :src ada :range-begin "procedure Fill" :range-end "\s-*(\(.*?\(?:\n.*\)*?\)*)\s-*\([^;]*?\(?:\n[^;]*\)*?\)*;" :lines "7-12"

*** Implementation of Fill

    We will present two implementations of ~Fill~ in the following
    (the second one has been suggested by Yannick Moy of AdaCore). The
    first is the one implemented in ACSL by Example and simply
    initializes the array by traversing it. The second one benefits
    from SPARK expressiveness and uses an aggregate to initialize the
    array.

**** A "classic" implementation of Fill

     The implementation of ~Fill~ is the following:

     #+INCLUDE: "../../../mutating/fill_p.adb" :src ada :range-begin "procedure Fill" :range-end "End Fill;" :lines "4-16"

     The loop invariant specify that there is a constant range of ~Val~
     values starting at index ~A'First~ with length ~I - A'First + 1~
     in ~A~.

     Everything is easily proved with ~GNATprove~.

**** A more "SPARKish" implementation of Fill

     The previous implementation follows the implementation of ~Fill~
     from ACSL by example. A more natural way to initialize an array
     with a value in SPARK is to use an aggregate ~(others => Val)~
     specifying that all values of the array are equal to ~Val~. The
     implementation is given in the ~fill_agg_p.adb~ file and is
     really simple:

     #+INCLUDE: "fill_agg_p.adb" :src ada :range-begin "procedure Fill" :range-end "End Fill;" :lines "4-11"

 # Local Variables:
 # ispell-dictionary: "english"
 # End:

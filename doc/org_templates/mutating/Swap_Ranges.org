#+EXPORT_FILE_NAME: ../../../mutating/Swap_Ranges.org
#+OPTIONS: author:nil title:nil toc:nil

** The Swap_Ranges algorithm

   The ~Swap_Ranges~ algorithm exchanges the contents of two arrays.
   Its signature is the following:

   #+BEGIN_SRC ada
     procedure Swap_Ranges (A : in out T_Arr; B: in out T_Arr);
   #+END_SRC

*** Specification of Swap_Ranges

    The specification of ~Swap_Ranges~ is the following:

    #+INCLUDE: "../../../mutating/swap_ranges_p.ads" :src ada :range-begin "procedure Swap_Ranges" :range-end "\s-*(\([^()]*?\(?:\n[^()]*\)*?\)*)\s-*\([^;]*?\(?:\n[^;]*\)*?\)*;" :lines "7-12"

    The precondition expresses the fact that ~A~ and ~B~ must have the
    same length. The postcondition expresses the fact that the values
    in ~A~ and ~B~ have actually been exchanged. Using SPARK syntax
    for arrays, the assertion are easy to write.

*** Implementation of Swap_Ranges

    #+INCLUDE: "../../../mutating/swap_ranges_p.adb" :src ada :range-begin "procedure Swap_Ranges" :range-end "End Swap_Ranges;" :lines "4-29"

    The loop invariants specify that:
      - the ~J~ first values of the arrays have been exchanged
      - the next values in the arrays have not been swapped yet

    Notice that we cannot use the ~Old~ attribute to refer to the
    previous state of the arrays, as ~Old~ is only available in
    postconditions. We therefore use the ~Loop_Entry~ attribute that
    refers to the value of the arrays before entering the loop.

    Using ~GNATprove~, everything is proved.

*** A new implementation of Swap_Ranges

    The ~swap_ranges_index_p.adb~ file contains a more "SPARKish" (at
    least to our point of view) implementation of ~Swap_Ranges~:

    #+INCLUDE: "../../../mutating/swap_ranges_index_p.adb" :src ada :range-begin "procedure Swap_Ranges" :range-end "End Swap_Ranges;" :lines "4-31"

    In this implementation, we will not use an offset as loop
    variable, but range over ~A'Range~. A local variable is defined
    for readability to define the corresponding index for ~B~.

    Again, everything is proved using ~GNATprove~.

# Local Variables:
# ispell-dictionary: "english"
# End:
